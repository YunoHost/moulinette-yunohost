# Extract a key from a plain command output
#
# example: yunohost user info tata --output-as plain | ynh_get_plain_key mail
#
# usage: ynh_get_plain_key key [subkey [subsubkey ...]]
# | ret: string - the key's value
ynh_get_plain_key() {
    prefix="#"
    founded=0
    key=$1
    shift
    while read line; do
        if [[ "$founded" == "1" ]] ; then
            [[ "$line" =~ ^${prefix}[^#] ]] && return
            echo $line
        elif [[ "$line" =~ ^${prefix}${key}$ ]]; then
            if [[ -n "${1:-}" ]]; then
                prefix+="#"
                key=$1
                shift
            else
                founded=1
            fi
        fi
    done
}

# Download and uncompress the source from app.src
#
# The file conf/app.src need to contains:
# 
# src_url="Address to download the app archive"
# src_sum="Control sum"
# src_format="tar.gz" # (Optional) default value: tar.gz
# src_in_subdir=false # (Optional) Put false if source are directly in the archive root
# src_filename="example.tar.gz" (Optionnal) default value: ${src_id}.${src_format}
#
#
# usage: ynh_setup_source dest_dir [source_id]
# | arg: dest_dir  - Directory where to setup sources
# | arg: source_id - Name of the app, if the package contains more than one app
ynh_setup_source () {
    local dest_dir=$1
    local src_id=${2:-app} # If the argument is not given, source_id equal "app"
    # Default value
    # local src_format="tar.gz"
    local src_sumprg="sha256sum"
    local src_filename=""
    local src_in_subdir=true #false if source are directly in the archive root   

    # Load value from configuration file (see above for a small doc about this file
    # format)
    source ../conf/${src_id}.src
    src_format=$(echo "$src_format" | tr '[:upper:]' '[:lower:]')
    if [ "$src_filename" = "" ] ; then
        src_filename="${src_id}.${src_format}"
    fi
    local local_src="/opt/yunohost-apps-src/${YNH_APP_ID}/${src_filename}"

    if test -e "$local_source"
    then	# Use the local source file if it is present
    	cp $local_src $src_filename
    else	# If not, download the source
    	wget -nv -O $src_filename $src_url
    fi

    # Check the control sum
    echo "$src_checksum $src_filename" \
        | ${src_sumprg} -c --status || ynh_die "Corrupt source"

    # Extract source into the app dir
    sudo mkdir -p "$dest_dir"
    if [ "$src_format" = "zip" ]
    then # Zip format
        # Using of a temp directory, because unzip doesn't manage --strip-components
        if $src_in_subdir ; then
            local tmp_dir=$(mktemp -d)
            unzip -quo $src_filename -d "$tmp_dir"
            sudo cp -a $tmp_dir/*/. "$dest_dir"
            ynh_secure_remove "$tmp_dir"
        else
            unzip -quo $src_filename -d "$dest_dir"
        fi
    else
        local strip=""
        if $src_in_subdir ; then
            strip="--strip-components 1"
        fi
        if [[ "$src_format" =~ ^tar.gz|tar.bz2|tar.xz$ ]] ; then
            sudo tar -xf $src_filename -C "$dest_dir" $strip
        else
            ynh_die "Archive format unrecognized."
        fi
    fi

    # Apply patches
    if [ $(find ../sources/patches/ -type f -name "${source_id}-*.patch"  | wc -l) ]; then
        (cd "$dest_dir" \
            && for p in ../sources/patches/${source_id}-*.patch; do \
                sudo patch -p1 < $p; done) \
            || ynh_die "Unable to apply patches"
    fi

    # Add supplementary files
    if test -e "../sources/extra_files"; then
        sudo cp -a ../sources/extra_files/. "$dest_dir"
    fi

}
