#!/bin/bash

# Get the total or free amount of RAM+swap on the system
#
# [packagingv1]
#
# usage: ynh_get_ram [--free|--total] [--ignore_swap|--only_swap]
# | arg: -f, --free         - Count free RAM+swap
# | arg: -t, --total        - Count total RAM+swap
# | arg: -s, --ignore_swap  - Ignore swap, consider only real RAM
# | arg: -o, --only_swap    - Ignore real RAM, consider only swap
# | ret: the amount of free ram, in MB (MegaBytes)
#
# Requires YunoHost version 3.8.1 or higher.
ynh_get_ram() {
    # Declare an array to define the options of this helper.
    local legacy_args=ftso
    local -A args_array=([f]=free [t]=total [s]=ignore_swap [o]=only_swap)
    local free
    local total
    local ignore_swap
    local only_swap
    # Manage arguments with getopts
    ynh_handle_getopts_args "$@"
    ignore_swap=${ignore_swap:-0}
    only_swap=${only_swap:-0}
    free=${free:-0}
    total=${total:-0}

    if [ $free -eq $total ]; then
        ynh_print_warn --message="You have to choose --free or --total when using ynh_get_ram"
        ram=0
    # Use the total amount of ram
    elif [ $free -eq 1 ]; then
        local free_ram=$(LC_ALL=C vmstat --stats --unit M | grep "free memory" | awk '{print $1}')
        local free_swap=$(LC_ALL=C vmstat --stats --unit M | grep "free swap" | awk '{print $1}')
        local free_ram_swap=$((free_ram + free_swap))

        # Use the total amount of free ram
        local ram=$free_ram_swap
        if [ $ignore_swap -eq 1 ]; then
            # Use only the amount of free ram
            ram=$free_ram
        elif [ $only_swap -eq 1 ]; then
            # Use only the amount of free swap
            ram=$free_swap
        fi
    elif [ $total -eq 1 ]; then
        local total_ram=$(LC_ALL=C vmstat --stats --unit M | grep "total memory" | awk '{print $1}')
        local total_swap=$(LC_ALL=C vmstat --stats --unit M | grep "total swap" | awk '{print $1}')
        local total_ram_swap=$((total_ram + total_swap))

        local ram=$total_ram_swap
        if [ $ignore_swap -eq 1 ]; then
            # Use only the amount of free ram
            ram=$total_ram
        elif [ $only_swap -eq 1 ]; then
            # Use only the amount of free swap
            ram=$total_swap
        fi
    fi

    echo $ram
}

# Return 0 or 1 depending if the system has a given amount of RAM+swap free or total
#
# [packagingv1]
#
# usage: ynh_require_ram --required=RAM [--free|--total] [--ignore_swap|--only_swap]
# | arg: -r, --required=    - The amount to require, in MB
# | arg: -f, --free         - Count free RAM+swap
# | arg: -t, --total        - Count total RAM+swap
# | arg: -s, --ignore_swap  - Ignore swap, consider only real RAM
# | arg: -o, --only_swap    - Ignore real RAM, consider only swap
# | ret: 1 if the ram is under the requirement, 0 otherwise.
#
# Requires YunoHost version 3.8.1 or higher.
ynh_require_ram() {
    # Declare an array to define the options of this helper.
    local legacy_args=rftso
    local -A args_array=([r]=required= [f]=free [t]=total [s]=ignore_swap [o]=only_swap)
    local required
    local free
    local total
    local ignore_swap
    local only_swap
    # Manage arguments with getopts
    ynh_handle_getopts_args "$@"
    # Dunno if that's the right way to do, but that's some black magic to be able to
    # forward the bool args to ynh_get_ram easily?
    # If the variable $free is not empty, set it to '--free'
    free=${free:+--free}
    total=${total:+--total}
    ignore_swap=${ignore_swap:+--ignore_swap}
    only_swap=${only_swap:+--only_swap}

    local ram=$(ynh_get_ram $free $total $ignore_swap $only_swap)

    if [ $ram -lt $required ]; then
        return 1
    else
        return 0
    fi
}


# Ask the creation of a swap file for the application.
# The helper might or might not create the swap file, considering the machine's configuration.
#
# [packagingv1]
#
# usage: ynh_add_swap --size=SWAP in Mib
# | arg: -s, --size= - Amount of SWAP to add in Mib.
ynh_add_swap () {
    # Declare an array to define the options of this helper.
    declare -Ar args_array=( [s]=size= )
    local size
    # Manage arguments with getopts
    ynh_handle_getopts_args "$@"

    local swap_max_size=$(( $size * 1024 ))

    local free_space=$(df --output=avail / | sed 1d)
    # Because we don't want to fill the disk with a swap file, divide by 2 the available space.
    local usable_space=$(( $free_space / 2 ))

    SD_CARD_CAN_SWAP=${SD_CARD_CAN_SWAP:-0}

    # Swap on SD card only if it's is specified
    if ynh_is_main_device_a_sd_card && [ "$SD_CARD_CAN_SWAP" == "0" ]
    then
        ynh_print_warn --message="The main mountpoint of your system '/' is on an SD card, swap will not be added to prevent some damage to it. If you still want activate the swap, you can relaunch the command preceded by 'SD_CARD_CAN_SWAP=1'"
        return
    fi

    # Configure swappiness
    if [ ! -e /etc/sysctl.d/999-ynhswap.conf ]
    then
        echo "vm.swappiness=10" > /etc/sysctl.d/999-ynhswap.conf
        sysctl --quiet --system
    fi

    # Compare the available space with the size of the swap.
    # And set a acceptable size from the request
    if [ $usable_space -ge $swap_max_size ]
    then
        swap_size=$swap_max_size
    elif [ $usable_space -ge $(( $swap_max_size / 2 )) ]
    then
        swap_size=$(( $swap_max_size / 2 ))
    elif [ $usable_space -ge $(( $swap_max_size / 3 )) ]
    then
        swap_size=$(( $swap_max_size / 3 ))
    elif [ $usable_space -ge $(( $swap_max_size / 4 )) ]
    then
        swap_size=$(( $swap_max_size / 4 ))
    else
        echo "Not enough space left for a swap file" >&2
        swap_size=0
    fi

    # If there's enough space for a swap, and no existing swap here
    if [ $swap_size -ne 0 ] && [ ! -e /swap_file ]
    then
        # Create file
        truncate -s 0 /swap_file

        # set the No_COW attribute on the swapfile with chattr
        # let's not fail here, as some filesystems like ext4 do not support COW
        chattr +C /swap_file || true

        # Preallocate space for the swap file, fallocate may sometime not be used, use dd instead in this case
        if ! fallocate -l ${swap_size}K /swap_file
        then
            dd if=/dev/zero of=/swap_file bs=1024 count=${swap_size}
        fi
        chmod 0600 /swap_file
        # Create the swap
        mkswap /swap_file
        # And activate it
        swapon /swap_file
        # Then add an entry in fstab to load this swap at each boot.
        echo -e "/swap_file swap swap defaults 0 0 #Swap added by YunoHost config panel" >> /etc/fstab
    fi
}

# Delete the swap file created for the app by ynh_add_swap.
#
# [packagingv1]
#
ynh_del_swap () {
    # If there a swap at this place
    if [ -e /swap_file ]
    then
        # Clean the fstab
        sed -i "/#Swap added by YunoHost config panel/d" /etc/fstab
        # Desactive the swap file
        swapoff /swap_file
        # And remove it
        rm /swap_file
    fi
}

# Check if the device of the main mountpoint "/" is an SD card
#
# [internal]
#
# return 0 if it's an SD card, else 1
ynh_is_main_device_a_sd_card () {
    local main_device=$(lsblk --output PKNAME --noheadings $(findmnt / --nofsroot --uniq --output source --noheadings --first-only))

    if echo $main_device | grep --quiet "mmc" && [ $(tail -n1 /sys/block/$main_device/queue/rotational) == "0" ]
    then
        return 0
    else
        return 1
    fi
}
